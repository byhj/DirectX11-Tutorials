
cbuffer LightBuffer	 : register(b0)
{
  float4 ambientColor;
  float4 diffuseColor;
  float3 lightDirection;
  float  specularPower;
  float4 specularColor;

};

struct VS_OUTPUT 
{
    float4 Pos : SV_POSITION;
   	float2 Tex : TEXCOORD0;
	float3 Normal: NORMAL;
};

Texture2D tex : register(t0);
SamplerState texSample: register(s0);

float4 PS(VS_OUTPUT ps_in) : SV_TARGET
{
 // ps_in.Tex += texTrans.xy;

  float4 ambient = ambientColor;
  //Calc the diffuse light
  float3 lightDir  = -lightDirection;
  float  intensity = saturate( dot(ps_in.Normal, lightDir) ); 
  float4 diffuse   = saturate(diffuseColor * intensity);

  float4 result     = saturate(ambient ) ;
   
  float4 texColor = tex.Sample(texSample, ps_in.Tex);
  float4 pixelColor = result * texColor;
  pixelColor.a = 0.25f;
  return pixelColor;
}