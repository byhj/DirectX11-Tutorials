struct Distortion 
{    
    float2 distortion1;
    float2 distortion2;
    float2 distortion3;
    float  distortionScale;
    float  distortionBias;
};

cbuffer DistortionBuffer  :register(b0)
{
   Distortion cbDistort;
};

struct VS_OUTPUT 
{
    float4 Pos  : SV_POSITION;
	float2 Tex  : TEXCOORD0;
   	float2 Tex1 : TEXCOORD1;
	float2 Tex2 : TEXCOORD2;
	float2 Tex3 : TEXCOORD3;
};

Texture2D fireTex  : register(t0);
Texture2D noiseTex : register(t1);
Texture2D alphaTex : register(t2);

SamplerState texSample : register(s0);
SamplerState texSample1 : register(s1);

float4 PS(VS_OUTPUT ps_in) : SV_TARGET
{    
    float4 noise1, noise2 ,noise3;
	 // Sample the same noise texture using the three different texture coordinates to get three different noise scales.
    noise1 = noiseTex.Sample(texSample, ps_in.Tex1);
    noise2 = noiseTex.Sample(texSample, ps_in.Tex2);
    noise3 = noiseTex.Sample(texSample, ps_in.Tex3);

	// Move the noise from the (0, 1) range to the (-1, +1) range.
    noise1 = (noise1 - 0.5f) * 2.0f;
    noise2 = (noise2 - 0.5f) * 2.0f;
    noise3 = (noise3 - 0.5f) * 2.0f;

   // Distort the three noise x and y coordinates by the three different distortion x and y values.
    noise1.xy = noise1.xy * cbDistort.distortion1.xy;
    noise2.xy = noise2.xy * cbDistort.distortion2.xy;
    noise3.xy = noise3.xy * cbDistort.distortion3.xy;

	// Combine all three distorted noise results into a single noise result.
    float4  finalNoise = noise1 + noise2 + noise3;

	    // Perturb the input texture Y coordinates by the distortion scale and bias values.  
    // The perturbation gets stronger as you move up the texture which creates the flame flickering at the top effect.
    float perturb = ((1.0f - ps_in.Tex.y) * cbDistort.distortionScale) + cbDistort.distortionBias;

    // Now create the perturbed and distorted texture sampling coordinates that will be used to sample the fire color texture.
    float2 noiseCoords = (finalNoise.xy * perturb) + ps_in.Tex;

	    // Sample the color from the fire texture using the perturbed and distorted texture sampling coordinates.
    // Use the clamping sample state instead of the wrap sample state to prevent flames wrapping around.
    float4 fireColor = fireTex.Sample(texSample, noiseCoords.xy);

    // Sample the alpha value from the alpha texture using the perturbed and distorted texture sampling coordinates.
    // This will be used for transparency of the fire.
    // Use the clamping sample state instead of the wrap sample state to prevent flames wrapping around.
    float4 alphaColor = alphaTex.Sample(texSample1, noiseCoords.xy);

	    // Set the alpha blending of the fire to the perturbed and distored alpha texture value.
    fireColor.a = alphaColor;

    return fireColor;
}