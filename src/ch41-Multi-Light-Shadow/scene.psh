
cbuffer LightBuffer	 : register(b0)
{
  float4 ambientColor;
  float4 diffuseColor;
  float4 diffuseColor2;
};

struct VS_OUTPUT 
{
    float4 Pos         : SV_POSITION;
   	float2 Tex         : TEXCOORD0;
	float3 Normal      : NORMAL;
	float4 LightViewPos1: TEXCOORD1;
	float3 LightPos1    : TEXCOORD2;
	float4 LightViewPos2 :TEXCOORD3;
	float3 LightPos2    : TEXCOORD4;
};

Texture2D colorTex     : register(t0);
Texture2D depthMapTex  : register(t1);
Texture2D depthMapTex2  : register(t2);
SamplerState texSampleClamp : register(s0);
SamplerState texSampleWrap  : register(s1);

float4 PS(VS_OUTPUT ps_in) : SV_TARGET
{
   ps_in.Normal = normalize(ps_in.Normal);

  float bias = 0.01f;
  float4 color = ambientColor;

  float2 projTexCoord;
  projTexCoord.x =  ps_in.LightViewPos1.x / ps_in.LightViewPos1.w / 2.0f + 0.5f;
  projTexCoord.y = -ps_in.LightViewPos1.y / ps_in.LightViewPos1.w / 2.0f + 0.5f;

  // Determine if the projected coordinates are in the 0 to 1 range.  If so then this pixel is in the view of the light.
   if(  (saturate(projTexCoord.x) == projTexCoord.x) && (saturate(projTexCoord.y) == projTexCoord.y)  )
   {
        float depthValue = depthMapTex.Sample(texSampleClamp, projTexCoord).r;
        
        // Calculate the depth of the light.
        float  lightDepthValue = ps_in.LightViewPos1.z / ps_in.LightViewPos1.w;
        lightDepthValue = lightDepthValue - bias;
  		// Compare the depth of the shadow map value and the depth of the light to determine whether to shadow or to light this pixel.
		// If the light is in front of the object then light the pixel, if not then shadow this pixel since an object (occluder) is casting a shadow on it.
		if(lightDepthValue < depthValue)
		{
			float lightIntensity = saturate(dot(ps_in.Normal, ps_in.LightPos1));

		    if(lightIntensity > 0.0f)
			{
				color += (diffuseColor * lightIntensity);
			}
		}
   }


   //
  projTexCoord.x =  ps_in.LightViewPos2.x / ps_in.LightViewPos2.w / 2.0f + 0.5f;
  projTexCoord.y = -ps_in.LightViewPos2.y / ps_in.LightViewPos2.w / 2.0f + 0.5f;

  // Determine if the projected coordinates are in the 0 to 1 range.  If so then this pixel is in the view of the light.
   if(  (saturate(projTexCoord.x) == projTexCoord.x) && (saturate(projTexCoord.y) == projTexCoord.y)  )
   {
        float depthValue = depthMapTex2.Sample(texSampleClamp, projTexCoord).r;
        
        // Calculate the depth of the light.
        float  lightDepthValue = ps_in.LightViewPos2.z / ps_in.LightViewPos2.w;
        lightDepthValue = lightDepthValue - bias;
  		// Compare the depth of the shadow map value and the depth of the light to determine whether to shadow or to light this pixel.
		// If the light is in front of the object then light the pixel, if not then shadow this pixel since an object (occluder) is casting a shadow on it.
		if(lightDepthValue < depthValue)
		{
			float lightIntensity = saturate(dot(ps_in.Normal, ps_in.LightPos2));

		    if(lightIntensity > 0.0f)
			{
				color += (diffuseColor2 * lightIntensity);

			}
		}
   }

   color = saturate(color);
   float4 texColor = colorTex.Sample(texSampleWrap, ps_in.Tex) ;
   float4 pixelColor =  color * texColor;

   return pixelColor ;
}