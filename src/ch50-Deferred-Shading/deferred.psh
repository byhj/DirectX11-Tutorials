
cbuffer LightBuffer	: register(b0)
{
  float4 ambientColor;
  float4 diffuseColor;
  float3 lightDirection;
  float  padding;
};

struct VS_OUT
{
    float4 Pos : SV_POSITION;
   	float2 Tex : TEXCOORD0;
};

Texture2D colorTex  : register(t0);
Texture2D normalTex : register(t1);
SamplerState texSample : register(s0);

float4 PS(VS_OUT ps_in) : SV_TARGET
{

  float4 texColor = colorTex.Sample(texSample, ps_in.Tex);
  float4 normal = normalTex.Sample(texSample, ps_in.Tex);

  //Calc the diffuse light
  float3 lightDir = -lightDirection;
  float intensity = saturate( dot(normal.xyz, lightDir) ); 
  float4 diffuse = saturate(diffuseColor * intensity);

  float4 ambient = ambientColor;
  float4 result = saturate(ambient + diffuse);
   

  float4 pixelColor = result * texColor;

  return pixelColor;
}